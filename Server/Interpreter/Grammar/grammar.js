/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[5,41,51,56,57,58,59,60],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[21,42,48],$Vc=[1,32],$Vd=[1,39],$Ve=[1,30],$Vf=[1,31],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[5,20,22,23,24,30,32,33,35,37,38,39,41,51,54,55,56,57,58,59,60,63,77,78,79,80,81,82,83],$Vt=[1,69],$Vu=[1,56],$Vv=[1,55],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,64],$VE=[1,65],$VF=[1,66],$VG=[1,67],$VH=[1,68],$VI=[21,26,36,48,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VJ=[2,41],$VK=[1,76],$VL=[21,26,36,48,62,75,76],$VM=[1,101],$VN=[26,48],$VO=[21,26,36,48,62,63,64,69,70,71,72,73,74,75,76],$VP=[21,26,36,48,62,63,64,65,66,67,69,70,71,72,73,74,75,76],$VQ=[21,26,36,48,62,69,70,71,72,73,74,75,76],$VR=[1,121],$VS=[1,122],$VT=[1,126],$VU=[1,127],$VV=[1,128],$VW=[1,129],$VX=[1,130],$VY=[1,123],$VZ=[1,124],$V_=[1,125],$V$=[5,20,22,23,30,32,33,35,37,38,39,41,51,54,55,56,57,58,59,60],$V01=[5,20,22,23,29,30,32,33,35,37,38,39,41,51,54,55,56,57,58,59,60],$V11=[20,22,23,30,32,33,35,37,38,39,41,54,55,56,57,58,59,60],$V21=[35,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"entrada_inicial":4,"EOF":5,"codigos_iniciales":6,"declaracion":7,"metodo":8,"run":9,"instrucciones":10,"inicio":11,"print":12,"println":13,"if":14,"while":15,"switch":16,"do_while":17,"for":18,"llamada_metodo":19,"BREAK":20,"PUNTO_Y_COMA":21,"CONTINUE":22,"IF":23,"PAR_ABRE":24,"expresion":25,"PAR_CIERRA":26,"statement":27,"elsE":28,"ELSE":29,"WHILE":30,"LLAVE_ABRE":31,"LLAVE_CIERRA":32,"SWITCH":33,"case_list":34,"DEFAULT":35,"DOS_PUNTOS":36,"CASE":37,"DO":38,"FOR":39,"declaracion_for":40,"IDENTIFICADOR":41,"IGUAL":42,"INCREMENTO":43,"DECREMENTO":44,"tipo_metodo":45,"parametros":46,"VOID":47,"COMA":48,"tipos_prueba":49,"lista_expresiones":50,"RUN":51,"tipos":52,"identificador_comas":53,"PRINT":54,"PRINT_LN":55,"INT":56,"DOUBLE":57,"CHAR":58,"BOOLEAN":59,"STRING":60,"ternario":61,"INTERROGACION":62,"MENOS":63,"MAS":64,"POR":65,"DIVIDIR":66,"MODULO":67,"POTENCIA":68,"D_IGUAL":69,"DIFERENTE":70,"MAYOR_IGUAL":71,"MENOR_IGUAL":72,"MAYOR":73,"MENOR":74,"AND":75,"OR":76,"NOT":77,"DOBLE":78,"ENTERO":79,"CADENA":80,"CARACTER":81,"TRUE":82,"FALSE":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"BREAK",21:"PUNTO_Y_COMA",22:"CONTINUE",23:"IF",24:"PAR_ABRE",26:"PAR_CIERRA",29:"ELSE",30:"WHILE",31:"LLAVE_ABRE",32:"LLAVE_CIERRA",33:"SWITCH",35:"DEFAULT",36:"DOS_PUNTOS",37:"CASE",38:"DO",39:"FOR",41:"IDENTIFICADOR",42:"IGUAL",43:"INCREMENTO",44:"DECREMENTO",47:"VOID",48:"COMA",51:"RUN",54:"PRINT",55:"PRINT_LN",56:"INT",57:"DOUBLE",58:"CHAR",59:"BOOLEAN",60:"STRING",62:"INTERROGACION",63:"MENOS",64:"MAS",65:"POR",66:"DIVIDIR",67:"MODULO",68:"POTENCIA",69:"D_IGUAL",70:"DIFERENTE",71:"MAYOR_IGUAL",72:"MENOR_IGUAL",73:"MAYOR",74:"MENOR",75:"AND",76:"OR",77:"NOT",78:"DOBLE",79:"ENTERO",80:"CADENA",81:"CARACTER",82:"TRUE",83:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,2],[11,2],[14,6],[28,2],[28,2],[28,0],[15,5],[27,3],[27,2],[16,10],[34,5],[34,4],[34,4],[34,3],[17,7],[18,8],[40,3],[40,2],[40,2],[8,5],[8,6],[45,2],[45,0],[46,4],[46,2],[19,4],[19,5],[50,3],[50,1],[9,2],[7,3],[7,5],[7,4],[7,3],[7,3],[53,3],[53,1],[12,5],[13,5],[52,1],[52,1],[52,1],[52,1],[52,1],[49,1],[49,1],[49,1],[49,1],[49,1],[61,5],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,2],[25,2],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 8:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 9: case 55:
this.$=[$$[$0]]
break;
case 4:
this.$ = []; ErrorList.addError(new Error_(_$[$0].first_line, _$[$0].first_column, "Sintactico", "No se encuentra el caracter " + yytext));
break;
case 5: case 6: case 7: case 22: case 23: case 48: case 58: case 59: case 60: case 61: case 62:
this.$ = $$[$0]
break;
case 19:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 20:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 21:
this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 24: case 40: case 41:
this.$ = null
break;
case 25:
this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 26:
this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 27:
this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 28:
this.$=new Switch($$[$0-7], $$[$0-4], $$[$0-1],  _$[$0-9].first_line, _$[$0-9].first_column)
break;
case 29:
$$[$0-4].push(new Case($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));this.$=$$[$0-4];
break;
case 30:
$$[$0-3].push(new Case($$[$0-1], [], _$[$0-3].first_line, _$[$0-3].first_column));this.$=$$[$0-3];
break;
case 31:
this.$=[new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)];
break;
case 32:
this.$=[new Case($$[$0-1], [], _$[$0-2].first_line, _$[$0-2].first_column)];
break;
case 33:
this.$ = new Do_While($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 34:
this.$=new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 35:
this.$ = new Declaracion(null, [$$[$0-2]], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 36:
this.$ = new Declaracion(null, [$$[$0-1]], new Aritmetica(new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),new Literal("1",TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.SUMA, _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 37:
this.$ = new Declaracion(null, [$$[$0-1]], new Aritmetica(new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),new Literal("1",TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.RESTA, _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 38:
this.$ = new Metodo($$[$0-4], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 39:
this.$ = new Metodo($$[$0-5], $$[$0], $$[$0-3], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 42:
$$[$0-3].push(new Parametro($$[$0], $$[$0-1])); this.$ = $$[$0-3]
break;
case 43:
this.$ = [new Parametro($$[$0], $$[$0-1])]
break;
case 44:
this.$ = new LlamadaMetodo($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 45:
this.$ = new LlamadaMetodo($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 46:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2]
break;
case 47:
this.$ = [$$[$0]]
break;
case 49:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 50:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 51:
this.$ = new Declaracion(null, [$$[$0-3]], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 52:
this.$ = new Declaracion(null, [$$[$0-2]], new Aritmetica(new Acceso($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),new Literal("1",TipoLiteral.ENTERO, _$[$0-2].first_line, _$[$0-2].first_column),TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 53:
this.$ = new Declaracion(null, [$$[$0-2]], new Aritmetica(new Acceso($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),new Literal("1",TipoLiteral.ENTERO, _$[$0-2].first_line, _$[$0-2].first_column),TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 54:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 56:
this.$ = new Print($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 57:
this.$ = new PrintLn($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 63:
this.$ = TipoLiteral.ENTERO
break;
case 64:
this.$ = TipoLiteral.DOBLE
break;
case 65:
this.$ = TipoLiteral.CARACTER
break;
case 66:
this.$ = TipoLiteral.BOOLEAN
break;
case 67:
this.$ = TipoLiteral.CADENA
break;
case 68:
this.$= new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 69:
this.$= new Aritmetica($$[$0],new Literal("-1",TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 70:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 71:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 72:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 73:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 74:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 75:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 76:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 77:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.NO_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 78:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 79:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 80:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 81:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 82:
this.$= new Logico($$[$0-2], $$[$0], TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 83:
this.$= new Logico($$[$0-2], $$[$0], TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 84:
this.$= new Logico(null, $$[$0], TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 85:
this.$= $$[$0-1]
break;
case 86:
this.$= new Literal($$[$0],TipoLiteral.DOBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 87:
this.$= new Literal($$[$0],TipoLiteral.ENTERO, _$[$0].first_line, _$[$0].first_column)
break;
case 88:
this.$= new Literal($$[$0],TipoLiteral.CADENA, _$[$0].first_line, _$[$0].first_column)
break;
case 89:
this.$= new Literal($$[$0],TipoLiteral.CARACTER, _$[$0].first_line, _$[$0].first_column)
break;
case 90: case 91:
this.$= new Literal($$[$0],TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 92:
this.$= new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 93:
this.$= new Aritmetica(new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),new Literal("1",TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.SUMA, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 94:
this.$= new Aritmetica(new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),new Literal("1",TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.RESTA, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 95:
this.$= $$[$0]
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:5,8:6,9:7,41:$V0,51:$V1,52:8,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6},{1:[3]},{5:[1,16],6:17,7:5,8:6,9:7,41:$V0,51:$V1,52:8,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),{41:[1,19],53:18},{24:[1,23],42:$V8,43:$V9,44:$Va},{19:24,41:[1,25]},{41:[2,58]},{41:[2,59]},{41:[2,60]},{41:[2,61]},{41:[2,62]},{1:[2,1]},o($V7,[2,2]),{21:[1,26],42:[1,27],48:[1,28]},o($Vb,[2,55]),{24:$Vc,25:29,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{21:[1,41]},{21:[1,42]},{26:[1,43],46:44,49:45,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},o($V7,[2,48]),{24:$Vr},o($Vs,[2,49]),{24:$Vc,25:52,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{41:[1,53]},{21:[1,54],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{24:$Vc,25:70,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:71,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:72,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},o($VI,[2,86]),o($VI,[2,87]),o($VI,[2,88]),o($VI,[2,89]),o($VI,[2,90]),o($VI,[2,91]),o($VI,[2,92],{43:[1,73],44:[1,74]}),o($VI,[2,95]),o($Vs,[2,52]),o($Vs,[2,53]),{31:$VJ,36:$VK,45:75},{26:[1,77],48:[1,78]},{41:[1,79]},{41:[2,63]},{41:[2,64]},{41:[2,65]},{41:[2,66]},{41:[2,67]},{24:$Vc,25:82,26:[1,80],41:$Vd,50:81,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{21:[1,83],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},o($Vb,[2,54]),o($Vs,[2,51]),{24:$Vc,25:84,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:85,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:86,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:87,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:88,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:89,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:90,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:91,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:92,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:93,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:94,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:95,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:96,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:97,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:98,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},o($VI,[2,69]),o($VL,[2,84],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF}),{26:[1,99],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},o($VI,[2,93]),o($VI,[2,94]),{27:100,31:$VM},{47:[1,102]},{31:$VJ,36:$VK,45:103},{49:104,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},o($VN,[2,43]),{21:[1,105]},{26:[1,106],48:[1,107]},o($VN,[2,47],{62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($Vs,[2,50]),o($VO,[2,70],{65:$Vw,66:$Vx,67:$Vy,68:$Vz}),o($VO,[2,71],{65:$Vw,66:$Vx,67:$Vy,68:$Vz}),o($VP,[2,72],{68:$Vz}),o($VP,[2,73],{68:$Vz}),o($VP,[2,74],{68:$Vz}),o($VP,[2,75],{68:$Vz}),o($VQ,[2,76],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz}),o($VQ,[2,77],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz}),o($VQ,[2,78],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz}),o($VQ,[2,79],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz}),o($VQ,[2,80],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz}),o($VQ,[2,81],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz}),o($VL,[2,82],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF}),o([21,26,36,48,62,76],[2,83],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),{36:[1,108],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},o($VI,[2,85]),o($V7,[2,38]),{7:112,10:109,11:111,12:113,13:114,14:115,15:116,16:117,17:118,18:119,19:120,20:$VR,22:$VS,23:$VT,30:$VU,32:[1,110],33:$VV,38:$VW,39:$VX,41:$VY,52:8,54:$VZ,55:$V_,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6},{31:[2,40]},{27:131,31:$VM},{41:[1,132]},o($V$,[2,44]),{21:[1,133]},{24:$Vc,25:134,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:135,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{7:112,11:137,12:113,13:114,14:115,15:116,16:117,17:118,18:119,19:120,20:$VR,22:$VS,23:$VT,30:$VU,32:[1,136],33:$VV,38:$VW,39:$VX,41:$VY,52:8,54:$VZ,55:$V_,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6},o($V01,[2,27]),o($V11,[2,9]),o($V11,[2,10]),o($V11,[2,11]),o($V11,[2,12]),o($V11,[2,13]),o($V11,[2,14]),o($V11,[2,15]),o($V11,[2,16]),o($V11,[2,17]),o($V11,[2,18]),{21:[1,138]},{21:[1,139]},{24:$Vr,42:$V8,43:$V9,44:$Va},{24:[1,140]},{24:[1,141]},{24:[1,142]},{24:[1,143]},{24:[1,144]},{27:145,31:$VM},{24:[1,146]},o($V7,[2,39]),o($VN,[2,42]),o($V$,[2,45]),o($VN,[2,46],{62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o([21,26,36,48,62],[2,68],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH}),o($V01,[2,26]),o($V11,[2,8]),o($V11,[2,19]),o($V11,[2,20]),{24:$Vc,25:147,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:148,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:149,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:150,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:$Vc,25:151,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{30:[1,152]},{7:153,41:[1,154],52:8,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6},{26:[1,155],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{26:[1,156],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{26:[1,157],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{26:[1,158],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{26:[1,159],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{24:[1,160]},{24:$Vc,25:161,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{42:$V8,43:$V9,44:$Va},{21:[1,162]},{21:[1,163]},{27:164,31:$VM},{27:165,31:$VM},{31:[1,166]},{24:$Vc,25:167,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{21:[1,168],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},o($V11,[2,56]),o($V11,[2,57]),o($V11,[2,24],{28:169,29:[1,170]}),o($V11,[2,25]),{34:171,37:[1,172]},{26:[1,173],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{40:174,41:[1,175]},o($V11,[2,21]),{14:177,23:$VT,27:176,31:$VM},{35:[1,178],37:[1,179]},{24:$Vc,25:180,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{21:[1,181]},{26:[1,182]},{42:[1,183],43:[1,184],44:[1,185]},o($V11,[2,22]),o($V11,[2,23]),{36:[1,186]},{24:$Vc,25:187,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{36:[1,188],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},o($V11,[2,33]),{27:189,31:$VM},{24:$Vc,25:190,41:$Vd,61:40,63:$Ve,77:$Vf,78:$Vg,79:$Vh,80:$Vi,81:$Vj,82:$Vk,83:$Vl},{26:[2,36]},{26:[2,37]},{7:112,10:191,11:111,12:113,13:114,14:115,15:116,16:117,17:118,18:119,19:120,20:$VR,22:$VS,23:$VT,30:$VU,33:$VV,38:$VW,39:$VX,41:$VY,52:8,54:$VZ,55:$V_,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6},{36:[1,192],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},o($V21,[2,32],{52:8,11:111,7:112,12:113,13:114,14:115,15:116,16:117,17:118,18:119,19:120,10:193,20:$VR,22:$VS,23:$VT,30:$VU,33:$VV,38:$VW,39:$VX,41:$VY,54:$VZ,55:$V_,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6}),o($V11,[2,34]),{26:[2,35],62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH},{7:112,11:137,12:113,13:114,14:115,15:116,16:117,17:118,18:119,19:120,20:$VR,22:$VS,23:$VT,30:$VU,32:[1,194],33:$VV,38:$VW,39:$VX,41:$VY,52:8,54:$VZ,55:$V_,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6},o($V21,[2,30],{52:8,11:111,7:112,12:113,13:114,14:115,15:116,16:117,17:118,18:119,19:120,10:195,20:$VR,22:$VS,23:$VT,30:$VU,33:$VV,38:$VW,39:$VX,41:$VY,54:$VZ,55:$V_,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6}),o($V21,[2,31],{52:8,7:112,12:113,13:114,14:115,15:116,16:117,17:118,18:119,19:120,11:137,20:$VR,22:$VS,23:$VT,30:$VU,33:$VV,38:$VW,39:$VX,41:$VY,54:$VZ,55:$V_,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6}),o($V11,[2,28]),o($V21,[2,29],{52:8,7:112,12:113,13:114,14:115,15:116,16:117,17:118,18:119,19:120,11:137,20:$VR,22:$VS,23:$VT,30:$VU,33:$VV,38:$VW,39:$VX,41:$VY,54:$VZ,55:$V_,56:$V2,57:$V3,58:$V4,59:$V5,60:$V6})],
defaultActions: {11:[2,58],12:[2,59],13:[2,60],14:[2,61],15:[2,62],16:[2,1],46:[2,63],47:[2,64],48:[2,65],49:[2,66],50:[2,67],102:[2,40],184:[2,36],185:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Aritmetica,TipoAritmetica} = require('../Expresion/Aritmetica')
    const {Relacional,TipoRelacional} = require('../Expresion/Relacional')
    const {Ternario} = require('../Expresion/Ternario')
    const {Logico,TipoLogica} = require('../Expresion/Logico')
    const {Literal,TipoLiteral} = require('../Expresion/Literal')
    const {Declaracion} = require('../Instruccion/Declaracion')
    const {Acceso} = require('../Expresion/Acceso')
    const {Print} = require('../Instruccion/Print')
    const {PrintLn} = require('../Instruccion/PrintLn')
    const {Statement} = require('../Instruccion/Statement')
    const {While} = require('../Instruccion/While')
    const {If} = require('../Instruccion/If')
    const {Case} = require('../Instruccion/Case')
    const {Switch} = require('../Instruccion/Switch')
    const {Break} = require('../Instruccion/Break')
    const {Continue} = require('../Instruccion/Continue')
    const {Do_While} = require('../Instruccion/Do_While')
    const {For} = require('../Instruccion/For')
    const {Metodo, Parametro} = require('../Instruccion/Metodo')
    const {LlamadaMetodo} = require('../Instruccion/LlamadaMetodo')
    const { ErrorList } = require("../StaticObjects/ErrorList")
    const { Error_ } = require("../Error/Error");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Se ignoran espacios en blanco
break;
case 1://Comentario de una linea
break;
case 2://Comentario Multilinea
break;
case 3:return 82;
break;
case 4:return 83;
break;
case 5:return 54;
break;
case 6:return 55;
break;
case 7:return 56;
break;
case 8:return 57;
break;
case 9:return 58;
break;
case 10:return 60;
break;
case 11:return 59;
break;
case 12:return 23;
break;
case 13:return 29;
break;
case 14:return 30;
break;
case 15:return 20;
break;
case 16:return 22;
break;
case 17:return 33;
break;
case 18:return 37;
break;
case 19:return 35;
break;
case 20:return 38;
break;
case 21:return 39;
break;
case 22:return 47;
break;
case 23:return 51;
break;
case 24:return 78;
break;
case 25:return 79;
break;
case 26:return 41;
break;
case 27:return 24;
break;
case 28:return 26;
break;
case 29:return 31;
break;
case 30:return 32;
break;
case 31:return 48;
break;
case 32:return 21;
break;
case 33:return 36;
break;
case 34:return 62;
break;
case 35:return 69;
break;
case 36:return 72;
break;
case 37:return 74;
break;
case 38:return 71;                     
break;
case 39:return 73;
break;
case 40:return 70;
break;
case 41:return 42;
break;
case 42:return "OR";
break;
case 43:return "AND";
break;
case 44:return "NOT";
break;
case 45:return 43;
break;
case 46:return 44;
break;
case 47:return 64;
break;
case 48:return 63;
break;
case 49:return 65;
break;
case 50:return 66;
break;
case 51:return 68;
break;
case 52:return 67;
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 81; 
break;
case 55:return 5;
break;
case 56:ErrorList.addError(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "No se reconoce: " + yy_.yytext));
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:run\b)/i,/^(?:([0-9]+\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:"[^\"]*")/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}